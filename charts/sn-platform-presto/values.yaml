#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Flag to control whether to run initialize job
initialize: false

###
### K8S Settings
###

## Namespace to deploy pulsar
# NOTE: Make the default namespace as empty. So it will fallback to use the namespace used for installing the helm
#       chart. Helm does not position it self as a namespace manager, as namespaces in kubernetes are considered as
#       a higher control structure that is not part of the application.
namespace: ""
namespaceCreate: false
stackName: pulsar

pulsar_metadata:
  userProvidedZookeepers:
###
### Global Settings
###

## Pulsar Metadata Prefix
##
## By default, pulsar stores all the metadata at root path.
## You can configure to have a prefix (e.g. "/my-pulsar-cluster").
## If you do so, all the pulsar and bookkeeper metadata will
## be stored under the provided path
metadataPrefix: ""

## AntiAffinity
##
## Flag to enable and disable `AntiAffinity` for all components.
## This is a global setting that is applied to all components.
## If you need to disable AntiAffinity for a component, you can set
## the `affinity.anti_affinity` settings to `false` for that component.
affinity:
  anti_affinity: true

## Components
##
## Control what components of Apache Pulsar to deploy for the cluster
components:
  # pulsar sql
  sql_worker: true

vault:
  component: "vault"

## Images
##
## Control what images to use for each component
images:
  broker:
    repository: streamnative/sn-platform
    tag: "2.8.1.30"
    pullPolicy: IfNotPresent
  presto:
    repository: streamnative/sn-platform
    tag: "2.8.1.30"
    pullPolicy: IfNotPresent

domain:
  enabled: false
  suffix: test.pulsar.example.local

## TLS
## templates/tls-certs.yaml
##
## The chart is using cert-manager for provisioning TLS certs for
## brokers and proxies.
tls:
  enabled: false
  # common settings for generating certs
  common:
    # 90d
    duration: 2160h
    # 15d
    renewBefore: 360h
    organization:
      - pulsar
    keySize: 4096
    keyAlgorithm: rsa
    keyEncoding: pkcs8
  # settings for generating certs for proxy
  proxy:
    enabled: false
    cert_name: tls-proxy
    untrustedCa: true
  # settings for generating certs for broker
  broker:
    enabled: false
    cert_name: tls-broker
  # settings for generating certs for bookies
  bookie:
    enabled: false
    cert_name: tls-bookie
  # settings for generating certs for zookeeper
  zookeeper:
    enabled: false
    cert_name: tls-zookeeper
  presto:
    enabled: false
    cert_name: tls-presto


# Enable or disable broker authentication and authorization.
auth:
  authentication:
    enabled: true
    provider: "jwt"
    jwt:
      # Enable JWT authentication
      # If the token is generated by a secret key, set the usingSecretKey as true.
      # If the token is generated by a private key, set the usingSecretKey as false.
      usingSecretKey: false
  authorization:
    enabled: true
  superUsers:
    # broker to broker communication
    broker: "broker-admin"
    # proxy to broker communication
    proxy: "proxy-admin"
    # websocket proxy to broker communication
    websocket: "ws-admin"
    # pulsar-admin client to broker/proxy communication
    client: "admin"
    # streamnative-console
    streamnative-console: "super"
  # Enable vault based authentication
  vault:
    enabled: true
  oauth:
    enabled: false
    oauthIssuerUrl: "https://login.microsoftonline.com/your-tenant-id/v2.0"
    oauthAudience: "your-application-id"
    oauthSubjectClaim: "oid"
    oauthScopeClaim: "scp"
    oauthAuthzRoleClaim: "roles"
    # The name of the role when creating the application
    oauthAuthzAdminRole: ""
    # brokerClientCredential: ""
    # brokerClientAuthenticationPlugin: org.apache.pulsar.client.impl.auth.oauth2.AuthenticationOAuth2
    # brokerClientAuthenticationParameters: ""
    authenticationProvider: "io.streamnative.pulsar.broker.authentication.AuthenticationProviderOAuth"
    authorizationProvider: "io.streamnative.pulsar.broker.authorization.AuthorizationProviderOAuth"

ingress:
  presto:
    enabled: true
    tls:
      enabled: true
    type: LoadBalancer
    annotations: {}
    extraSpec: {}
    ports:
      http: 80
      https: 443

zookeeper:
  # use a component name that matches your grafana configuration
  # so the metrics are correctly rendered in grafana dashboard
  component: zookeeper
  ports:
    metrics: 8000
    client: 2181
    clientTls: 2281
    follower: 2888
    leaderElection: 3888
    
broker:
  component: broker
  ports:
    http: 8080
    https: 8443
    pulsar: 6650
    pulsarssl: 6651
  offload:
    enabled: false
    use: true
    managedLedgerOffloadDriver: aws-s3
    gcs:
      enabled: false
      gcsManagedLedgerOffloadRegion: "[YOUR REGION OF GCS]"
      gcsManagedLedgerOffloadBucket: "[YOUR BUCKET OF GCS]"
      gcsManagedLedgerOffloadMaxBlockSizeInBytes: "67108864"
      gcsManagedLedgerOffloadReadBufferSizeInBytes: "1048576"
    s3:
      enabled: false
      s3ManagedLedgerOffloadRegion: "[YOUR REGION OF S3]"
      s3ManagedLedgerOffloadBucket: "[YOUR BUCKET OF S3]"
      s3ManagedLedgerOffloadMaxBlockSizeInBytes: "67108864"
      s3ManagedLedgerOffloadReadBufferSizeInBytes: "1048576"
      s3ManagedLedgerOffloadServiceEndpoint: "http://s3.amazonaws.com"

# Deploy pulsar sql
presto:
  security:
    authentication:
      password:
        enabled: false
        # a K8S secret that stores the password file
        #
        # a) generate the password file `password.db`:
        #    $ touch password.db
        #    $ htpasswd -B -C 10 password.db <username>
        #
        # b) generate the secret: `kubectl -n pulsar create secret generic [PASSWORD FILE SECRET NAME] --from-file=password=password.db`
        #    example: kubectl -n pulsar create secret generic prod-pulsar-presto-password --from-file=password=password.db
        passwordFileName: "password.db"
        passwordFileSecret: '[PASSWORD FILE SECRET NAME]'
        passwordFileSecretKey: 'password'
      jwt:
        enabled: false
        publicKeyFileName: "public.key"
        publicKeyConfigMapName: '[PUBLIC KEY CM NAME]'
        # the public key stored in the configmap should be persisted in PEM format.
        # presto prefers the PEM format. If you generate the public key using `pulsar tokens` CLI,
        # you can use `openssl rsa -pubin -in <public key file> -inform DER -pubout -out <public key file in PEM format> -outform PEM`
        # to convert the public key file to a public key file in PEM format.
        publicKeyConfigMapKey: 'public.key'
    rules: >
      {
        "rules": [
        ]
      }
  coordinator:
    component: coordinator
    replicaCount: 1
    tolerations: []
    affinity:
      anti_affinity: true
      # Set the anti affinity type. Valid values:
      # requiredDuringSchedulingIgnoredDuringExecution - rules must be met for pod to be scheduled (hard) requires at least one node per replica
      # preferredDuringSchedulingIgnoredDuringExecution - scheduler will try to enforce but not guranentee
      type: preferredDuringSchedulingIgnoredDuringExecution
    annotations: {}
    gracePeriod: 10
    ports:
      http: 8081
      https: 8443
    resources:
      requests:
        memory: 4Gi
        cpu: 2
    # nodeSelector:
      # cloud.google.com/gke-nodepool: default-pool
    probe:
      liveness:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 10
        periodSeconds: 30
        path: "/v1/status"
      readiness:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 10
        periodSeconds: 30
        path: "/v1/status"
      startup:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 10
        periodSeconds: 30
    config:
      http:
        port: 8081
      query:
        maxMemory: "1GB"
        maxMemoryPerNode: "128MB"
        maxTotalMemoryPerNode: "256MB"
    jvm:
      memory: 2G
    log:
      presto:
        level: DEBUG
  worker:
    service:
      spec:
        clusterIP: None
    component: worker
    replicaCount: 2
    tolerations: []
    affinity:
      anti_affinity: true
      # Set the anti affinity type. Valid values:
      # requiredDuringSchedulingIgnoredDuringExecution - rules must be met for pod to be scheduled (hard) requires at least one node per replica
      # preferredDuringSchedulingIgnoredDuringExecution - scheduler will try to enforce but not guranentee
      type: preferredDuringSchedulingIgnoredDuringExecution
    annotations: {}
    gracePeriod: 10
    ports:
      http: 8081
    resources:
      requests:
        memory: 4Gi
        cpu: 2
    # nodeSelector:
      # cloud.google.com/gke-nodepool: default-pool
    probe:
      liveness:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 10
        periodSeconds: 30
      readiness:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 10
        periodSeconds: 30
      startup:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 10
        periodSeconds: 30
    config:
      query:
        maxMemory: "1GB"
        maxMemoryPerNode: "128MB"
        maxTotalMemoryPerNode: "256MB"
    jvm:
      memory: 2G
    log:
      presto:
        level: DEBUG
  node:
    environment: production
  read_offload:
    enabled: false
  catalog:
    pulsar:
      maxEntryReadBatchSize: "100"
      targetNumSplits: "16"
      maxSplitMessageQueueSize: "10000"
      maxSplitEntryQueueSize: "1000"
      namespaceDelimiterRewriteEnable: "true"
      rewriteNamespaceDelimiter: "/"
      bookkeeperThrottleValue: "0"
      managedLedgerCacheSizeMB: "0"
      bookkeeperNumIOThreads: "8"
      bookkeeperNumWorkerThreads: "8"
      mlNumWorkerThreads: "8"
      mlNumSchedulerThreads: "8"
  service:
    spec:
      clusterIP: None
